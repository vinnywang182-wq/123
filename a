import pandas as pd
import json

def flatten_nested_columns(df):
    """
    Flattens only the nested (dict/list/JSON) columns of a DataFrame.
    Column names of flattened parts are renamed with dot notation.
    Non-nested columns are left unchanged.

    Args:
        df (pd.DataFrame): Input DataFrame

    Returns:
        pd.DataFrame: DataFrame with only nested fields flattened
    """

    def parse_json(val):
        # Try to parse JSON strings into Python objects (dict or list)
        if isinstance(val, str):
            try:
                return json.loads(val)
            except json.JSONDecodeError:
                return val
        return val

    def flatten_element(elem, prefix=''):
        # Recursively flatten dicts and lists into a flat dict with dot-separated keys
        items = {}
        if isinstance(elem, dict):
            for k, v in elem.items():
                new_key = f"{prefix}.{k}" if prefix else k
                items.update(flatten_element(v, new_key))
        elif isinstance(elem, list):
            for i, v in enumerate(elem):
                new_key = f"{prefix}.{i}" if prefix else str(i)
                items.update(flatten_element(v, new_key))
        else:
            items[prefix] = elem
        return items

    df = df.copy()
    for col in df.columns:
        if df[col].dtype == 'object':
            # Try to parse as JSON if it's a string
            df[col] = df[col].apply(parse_json)

    flat_cols = []
    for col in df.columns:
        if df[col].apply(lambda x: isinstance(x, (dict, list))).any():
            # Needs flattening
            flat_dicts = df[col].apply(lambda x: flatten_element(x, col) if isinstance(x, (dict, list)) else {col: x})
            flat_df = pd.DataFrame(flat_dicts.tolist())
            flat_cols.append(flat_df)
        else:
            # No flattening needed
            flat_cols.append(df[[col]])

    return pd.concat(flat_cols, axis=1)
